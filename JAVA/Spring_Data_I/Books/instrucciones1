Actualizar y Eliminar
En esta actividad, implementará los métodos de Actualizar y Eliminar y comprobará las rutas con Postman. Continue usando el mismo proyecto mvc que ha estado usando hasta ahora. Aquí está algo de código del controlador para empezar.

src/main/java/com/codingdojo/mvc/controllers/BooksApi.java
// ..
import com.codingdojo.mvc.models.Book;
import com.codingdojo.mvc.services.BookService;
@RestController
public class BooksApi {
    private final BookService bookService;
    public BooksApi(BookService bookService){
        this.bookService = bookService;
    }
    //Otros métodos han sido removidos para resumir.
    @RequestMapping(value="/api/books/{id}", method=RequestMethod.PUT)
    public Book update(@PathVariable("id") Long id, @RequestParam(value="title") String title, @RequestParam(value="description") String desc, @RequestParam(value="language") String lang, @RequestParam(value="pages") Integer numOfPages) {
        Book book = bookService.updateBook(id, title, desc, lang, numOfPages);
        return book;
    }
    
    @RequestMapping(value="/api/books/{id}", method=RequestMethod.DELETE)
    public void destroy(@PathVariable("id") Long id) {
        bookService.deleteBook(id);
    }
}
Su trabajo es escribir los métodos de servicio que actualizarán y eliminarán correctamente un libro. Para actualizar un libro, tendrá que utilizar métodos setters del modelo y luego llamar al método save. Como puedes ver, save es usado por ambos métodos crear y actualizar. Para eliminar un libro, tendrá que utilizar el método deleteById. A continuación, he colocado el enlace a la documentación de CrudRepository.

Enlaces Útiles
Métodos de CrudRepository
